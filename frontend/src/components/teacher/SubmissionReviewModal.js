import React, { useState } from 'react';
import './SubmissionReviewModal.css';

const SubmissionReviewModal = ({ submission, onClose, onReview }) => {
    const [status, setStatus] = useState('approved');
    const [points, setPoints] = useState(submission.task.points);
    const [feedback, setFeedback] = useState('');
    const [loading, setLoading] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);

        const success = await onReview(submission._id, status, points, feedback);
        
        if (success) {
            onClose();
        }
        
        setLoading(false);
    };

    const formatDate = (date) => {
        return new Date(date).toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    const getStatusBadge = (status) => {
        const badges = {
            'pending': { text: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', color: '#ffa500', icon: '‚è≥' },
            'approved': { text: '–ü—Ä–∏–Ω—è—Ç–æ', color: '#51cf66', icon: '‚úÖ' },
            'rejected': { text: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ', color: '#ff6b6b', icon: '‚ùå' },
            'needs_revision': { text: '–ù—É–∂–Ω—ã –ø—Ä–∞–≤–∫–∏', color: '#ffd43b', icon: 'üìù' }
        };
        
        const badge = badges[status] || badges['pending'];
        
        return (
            <span style={{ 
                padding: '5px 12px', 
                background: badge.color, 
                color: 'white', 
                borderRadius: '20px',
                fontSize: '14px',
                fontWeight: '600'
            }}>
                {badge.icon} {badge.text}
            </span>
        );
    };

    return (
        <div className="modal-overlay" onClick={onClose}>
            <div className="review-modal" onClick={(e) => e.stopPropagation()}>
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <div className="review-header">
                    <div>
                        <h2>üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è</h2>
                        <p className="student-name">–°—Ç—É–¥–µ–Ω—Ç: {submission.student.name}</p>
                    </div>
                    <button className="btn-close" onClick={onClose}>‚úï</button>
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ */}
                <div className="review-content">
                    <div className="task-info-section">
                        <h3>üìö –ó–∞–¥–∞—á–∞: {submission.task.title}</h3>
                        <div className="task-meta">
                            <span>‚≠ê –°–ª–æ–∂–Ω–æ—Å—Ç—å: {'‚≠ê'.repeat(submission.task.difficulty)}</span>
                            <span>üíé –ë–∞–ª–ª–æ–≤: {submission.task.points}</span>
                            <span>üóìÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {formatDate(submission.submittedAt)}</span>
                            <span>üî¢ –ü–æ–ø—ã—Ç–∫–∞: #{submission.attemptNumber}</span>
                        </div>
                        {getStatusBadge(submission.status)}
                    </div>

                    {/* –ö–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞ */}
                    <div className="code-section">
                        <div className="section-header">
                            <h3>üíª –ö–æ–¥ —Ä–µ—à–µ–Ω–∏—è</h3>
                            <span className="language-badge">{submission.language}</span>
                        </div>
                        <pre className="code-display">
                            <code>{submission.code}</code>
                        </pre>
                    </div>

                    {/* –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ */}
                    <div className="task-description-section">
                        <h3>üìñ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h3>
                        <p>{submission.task.description}</p>
                    </div>

                    {/* –§–æ—Ä–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
                    <form onSubmit={handleSubmit} className="review-form">
                        <div className="form-row">
                            <div className="form-group">
                                <label>–°—Ç–∞—Ç—É—Å —Ä–µ—à–µ–Ω–∏—è *</label>
                                <select 
                                    value={status} 
                                    onChange={(e) => setStatus(e.target.value)}
                                    className="status-select"
                                >
                                    <option value="approved">‚úÖ –ü—Ä–∏–Ω—è—Ç—å</option>
                                    <option value="rejected">‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</option>
                                    <option value="needs_revision">üìù –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∫–∏</option>
                                </select>
                            </div>

                            <div className="form-group">
                                <label>–ë–∞–ª–ª—ã (–º–∞–∫—Å: {submission.task.points}) *</label>
                                <input
                                    type="number"
                                    min="0"
                                    max={submission.task.points}
                                    value={points}
                                    onChange={(e) => setPoints(parseInt(e.target.value))}
                                    className="points-input"
                                />
                            </div>
                        </div>

                        <div className="form-group">
                            <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π / –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å *</label>
                            <textarea
                                value={feedback}
                                onChange={(e) => setFeedback(e.target.value)}
                                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç—É..."
                                rows="6"
                                required
                                className="feedback-textarea"
                            />
                            <small>üí° –°–æ–≤–µ—Ç: –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç —Å–¥–µ–ª–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∞ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å</small>
                        </div>

                        {/* –ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã */}
                        <div className="quick-templates">
                            <p><strong>–ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã:</strong></p>
                            <div className="template-buttons">
                                <button 
                                    type="button"
                                    className="template-btn template-good"
                                    onClick={() => setFeedback('–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ö–æ–¥ —á–∏—Å—Ç—ã–π, –ª–æ–≥–∏–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è. ‚úÖ')}
                                >
                                    üëç –û—Ç–ª–∏—á–Ω–æ
                                </button>
                                <button 
                                    type="button"
                                    className="template-btn template-minor"
                                    onClick={() => setFeedback('–†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ, –Ω–æ –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è:\n- –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞\n- –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')}
                                >
                                    ‚ö†Ô∏è –ú–µ–ª–∫–∏–µ –ø—Ä–∞–≤–∫–∏
                                </button>
                                <button 
                                    type="button"
                                    className="template-btn template-major"
                                    onClick={() => setFeedback('–ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∏–∫–µ:\n- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤\n- –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')}
                                >
                                    ‚ùå –ù—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                                </button>
                            </div>
                        </div>

                        {/* –î–µ–π—Å—Ç–≤–∏—è */}
                        <div className="form-actions">
                            <button 
                                type="button" 
                                onClick={onClose} 
                                className="btn-cancel"
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button 
                                type="submit" 
                                className="btn-submit-review"
                                disabled={loading || !feedback.trim()}
                            >
                                {loading ? '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É'}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
};

export default SubmissionReviewModal;